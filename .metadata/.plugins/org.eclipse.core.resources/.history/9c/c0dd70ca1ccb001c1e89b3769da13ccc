
// Java program to implement
// a Singly Linked List
public class LinkedList {

	Node head; // head of list

	// Linked list Node.
	// This inner class is made static
	// so that main() can access it
	static class Node {

		int data;
		Node next;

		// Constructor
		Node(int d) {
			data = d;
			next = null;
		}
	}

	// Method to insert a new node
	public static LinkedList insert(LinkedList list, int data) {
		// Create a new node with given data
		Node new_node = new Node(data);
		new_node.next = null;

		// If the Linked List is empty,
		// then make the new node as head
		if (list.head == null) {
			list.head = new_node;
		} else {
			// Else traverse till the last node
			// and insert the new_node there
			Node last = list.head;
			while (last.next != null) {
				last = last.next;
			}

			// Insert the new_node at last node
			last.next = new_node;
		}

		// Return the list by head
		return list;
	}

	// Method to print the LinkedList.
	public static void printList(LinkedList list) {
		Node currNode = list.head;

		System.out.print("LinkedList: ");

		// Traverse through the LinkedList
		while (currNode != null) {
			// Print the data at current node
			System.out.print(currNode.data + " ");

			// Go to next node
			currNode = currNode.next;
		}
	}

	public static Node getIntersectionNode(Node headA, Node headB) {

		if (headA == null || headB == null)
			return null;

		Node a_pointer = headA;
		Node b_pointer = headB;

		while (a_pointer != b_pointer) {
			if (a_pointer == null) {
				a_pointer = headB;
			} else {
				a_pointer = a_pointer.next;

			}
			if (b_pointer == null) {
				b_pointer = headA;
			} else {
				b_pointer = b_pointer.next;

			}
		}
		return a_pointer;

	}

	public static Integer getNodeValue(Node intersectingNode) {
		return intersectingNode.data;

	}

	// Driver code
	public static void main(String[] args) {
		/* Start with the empty list. */
		
	}
}
